// This file is autogenerated by shader_to_inc.sh.
#ifndef fft_main_inc__
#define fft_main_inc__
namespace GLFFT { namespace Blob {
static const char fft_main_source[] = 
R"DELIM(/* Copyright (C) 2015 Hans-Kristian Arntzen <maister@archlinux.us>)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* Permission is hereby granted, free of charge,)DELIM" "\n"
R"DELIM(* to any person obtaining a copy of this software and associated documentation files (the "Software"),)DELIM" "\n"
R"DELIM(* to deal in the Software without restriction, including without limitation the rights to)DELIM" "\n"
R"DELIM(* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,)DELIM" "\n"
R"DELIM(* and to permit persons to whom the Software is furnished to do so, subject to the following conditions:)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,)DELIM" "\n"
R"DELIM(* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,)DELIM" "\n"
R"DELIM(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.)DELIM" "\n"
R"DELIM(* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,)DELIM" "\n"
R"DELIM(* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,)DELIM" "\n"
R"DELIM(* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.)DELIM" "\n"
R"DELIM(*/)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// P is the current accumulated radix factor.)DELIM" "\n"
R"DELIM(// First pass in an FFT, P == 1, then P will be pass0.radix, then pass0.radix * pass1.radix, and so on ...)DELIM" "\n"
R"DELIM(// Used to compute twiddle factors.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_P1)DELIM" "\n"
R"DELIM(#define uP constant_data.p_stride_padding.x)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if FFT_RADIX == 4)DELIM" "\n"
R"DELIM(// FFT4 implementation.)DELIM" "\n"
R"DELIM(void FFT4_horiz())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_P1)DELIM" "\n"
R"DELIM(FFT4_p1_horiz(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT4_horiz(gl_GlobalInvocationID.xy, uP);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT4_vert())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_P1)DELIM" "\n"
R"DELIM(FFT4_p1_vert(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT4_vert(gl_GlobalInvocationID.xy, uP);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT4())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_HORIZ)DELIM" "\n"
R"DELIM(FFT4_horiz();)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT4_vert();)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if FFT_RADIX == 8)DELIM" "\n"
R"DELIM(// FFT8 implementation.)DELIM" "\n"
R"DELIM(void FFT8_horiz())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_P1)DELIM" "\n"
R"DELIM(FFT8_p1_horiz(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT8_horiz(gl_GlobalInvocationID.xy, uP);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT8_vert())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_P1)DELIM" "\n"
R"DELIM(FFT8_p1_vert(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT8_vert(gl_GlobalInvocationID.xy, uP);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT8())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_HORIZ)DELIM" "\n"
R"DELIM(FFT8_horiz();)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT8_vert();)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if FFT_RADIX == 16)DELIM" "\n"
R"DELIM(void FFT16_horiz())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_P1)DELIM" "\n"
R"DELIM(FFT16_p1_horiz(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT16_horiz(gl_GlobalInvocationID.xy, uP);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT16_vert())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_P1)DELIM" "\n"
R"DELIM(FFT16_p1_vert(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT16_vert(gl_GlobalInvocationID.xy, uP);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT16())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_HORIZ)DELIM" "\n"
R"DELIM(FFT16_horiz();)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT16_vert();)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if FFT_RADIX == 64)DELIM" "\n"
R"DELIM(void FFT64_horiz())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_P1)DELIM" "\n"
R"DELIM(FFT64_p1_horiz(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT64_horiz(gl_GlobalInvocationID.xy, uP);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT64_vert())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_P1)DELIM" "\n"
R"DELIM(FFT64_p1_vert(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT64_vert(gl_GlobalInvocationID.xy, uP);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT64())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_HORIZ)DELIM" "\n"
R"DELIM(FFT64_horiz();)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(FFT64_vert();)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void main())DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#if defined(FFT_RESOLVE_REAL_TO_COMPLEX))DELIM" "\n"
R"DELIM(FFT_real_to_complex(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#elif defined(FFT_RESOLVE_COMPLEX_TO_REAL))DELIM" "\n"
R"DELIM(FFT_complex_to_real(gl_GlobalInvocationID.xy);)DELIM" "\n"
R"DELIM(#elif FFT_RADIX == 4)DELIM" "\n"
R"DELIM(FFT4();)DELIM" "\n"
R"DELIM(#elif FFT_RADIX == 8)DELIM" "\n"
R"DELIM(FFT8();)DELIM" "\n"
R"DELIM(#elif FFT_RADIX == 16)DELIM" "\n"
R"DELIM(FFT16();)DELIM" "\n"
R"DELIM(#elif FFT_RADIX == 64)DELIM" "\n"
R"DELIM(FFT64();)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#error Unimplemented FFT radix.)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
;
}}
#endif
