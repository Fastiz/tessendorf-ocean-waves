// This file is autogenerated by shader_to_inc.sh.
#ifndef fft_radix4_inc__
#define fft_radix4_inc__
namespace GLFFT { namespace Blob {
static const char fft_radix4_source[] = 
R"DELIM(/* Copyright (C) 2015 Hans-Kristian Arntzen <maister@archlinux.us>)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* Permission is hereby granted, free of charge,)DELIM" "\n"
R"DELIM(* to any person obtaining a copy of this software and associated documentation files (the "Software"),)DELIM" "\n"
R"DELIM(* to deal in the Software without restriction, including without limitation the rights to)DELIM" "\n"
R"DELIM(* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,)DELIM" "\n"
R"DELIM(* and to permit persons to whom the Software is furnished to do so, subject to the following conditions:)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,)DELIM" "\n"
R"DELIM(* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,)DELIM" "\n"
R"DELIM(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.)DELIM" "\n"
R"DELIM(* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,)DELIM" "\n"
R"DELIM(* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,)DELIM" "\n"
R"DELIM(* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.)DELIM" "\n"
R"DELIM(*/)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT4_p1(inout cfloat a, inout cfloat b, inout cfloat c, inout cfloat d))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(butterfly_p1(a, c);)DELIM" "\n"
R"DELIM(butterfly_p1_dir_j(b, d);)DELIM" "\n"
R"DELIM(butterfly_p1(a, b);)DELIM" "\n"
R"DELIM(butterfly_p1(c, d);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// FFT4 is implemented by in-place radix-2 twice.)DELIM" "\n"
R"DELIM(void FFT4(inout cfloat a, inout cfloat b, inout cfloat c, inout cfloat d, uint i, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uint k = i & (p - 1u);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(ctwiddle w = twiddle(k, p);)DELIM" "\n"
R"DELIM(butterfly(a, c, w);)DELIM" "\n"
R"DELIM(butterfly(b, d, w);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(ctwiddle w0 = twiddle(k, 2u * p);)DELIM" "\n"
R"DELIM(ctwiddle w1 = cmul_dir_j(w0);)DELIM" "\n"
R"DELIM(butterfly(a, b, w0);)DELIM" "\n"
R"DELIM(butterfly(c, d, w1);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT4_p1_horiz(uvec2 i))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uint quarter_samples = gl_NumWorkGroups.x * gl_WorkGroupSize.x;)DELIM" "\n"
R"DELIM(uint offset = i.y * quarter_samples * 4u;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_TEXTURE)DELIM" "\n"
R"DELIM(cfloat a = load_texture(i);)DELIM" "\n"
R"DELIM(cfloat b = load_texture(i + uvec2(quarter_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat c = load_texture(i + uvec2(2u * quarter_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat d = load_texture(i + uvec2(3u * quarter_samples, 0u));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(cfloat a = load_global(offset + i.x);)DELIM" "\n"
R"DELIM(cfloat b = load_global(offset + i.x + quarter_samples);)DELIM" "\n"
R"DELIM(cfloat c = load_global(offset + i.x + 2u * quarter_samples);)DELIM" "\n"
R"DELIM(cfloat d = load_global(offset + i.x + 3u * quarter_samples);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(FFT4_p1(a, b, c, d);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(#if FFT_CVECTOR_SIZE == 4)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 0u, cfloat(a.x, c.x, b.x, d.x));)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 1u, cfloat(a.y, c.y, b.y, d.y));)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 2u, cfloat(a.z, c.z, b.z, d.z));)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 3u, cfloat(a.w, c.w, b.w, d.w));)DELIM" "\n"
R"DELIM(#elif FFT_CVECTOR_SIZE == 2)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 0u, cfloat(a.xy, c.xy));)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 1u, cfloat(b.xy, d.xy));)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 2u, cfloat(a.zw, c.zw));)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 3u, cfloat(b.zw, d.zw));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 0u, a);)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 1u, c);)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 2u, b);)DELIM" "\n"
R"DELIM(store_global(offset + 4u * i.x + 3u, d);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT4_p1_vert(uvec2 i))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec2 quarter_samples = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;)DELIM" "\n"
R"DELIM(uint stride = uStride;)DELIM" "\n"
R"DELIM(uint y_stride = stride * quarter_samples.y;)DELIM" "\n"
R"DELIM(uint offset = stride * i.y;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_TEXTURE)DELIM" "\n"
R"DELIM(cfloat a = load_texture(i);)DELIM" "\n"
R"DELIM(cfloat b = load_texture(i + uvec2(0u, quarter_samples.y));)DELIM" "\n"
R"DELIM(cfloat c = load_texture(i + uvec2(0u, 2u * quarter_samples.y));)DELIM" "\n"
R"DELIM(cfloat d = load_texture(i + uvec2(0u, 3u * quarter_samples.y));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(cfloat a = load_global(offset + i.x + 0u * y_stride);)DELIM" "\n"
R"DELIM(cfloat b = load_global(offset + i.x + 1u * y_stride);)DELIM" "\n"
R"DELIM(cfloat c = load_global(offset + i.x + 2u * y_stride);)DELIM" "\n"
R"DELIM(cfloat d = load_global(offset + i.x + 3u * y_stride);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(FFT4_p1(a, b, c, d);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store_global((4u * i.y + 0u) * stride + i.x, a);)DELIM" "\n"
R"DELIM(store_global((4u * i.y + 1u) * stride + i.x, c);)DELIM" "\n"
R"DELIM(store_global((4u * i.y + 2u) * stride + i.x, b);)DELIM" "\n"
R"DELIM(store_global((4u * i.y + 3u) * stride + i.x, d);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT4_horiz(uvec2 i, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uint quarter_samples = gl_NumWorkGroups.x * gl_WorkGroupSize.x;)DELIM" "\n"
R"DELIM(uint offset = i.y * quarter_samples * 4u;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(cfloat a = load_global(offset + i.x);)DELIM" "\n"
R"DELIM(cfloat b = load_global(offset + i.x + quarter_samples);)DELIM" "\n"
R"DELIM(cfloat c = load_global(offset + i.x + 2u * quarter_samples);)DELIM" "\n"
R"DELIM(cfloat d = load_global(offset + i.x + 3u * quarter_samples);)DELIM" "\n"
R"DELIM(FFT4(a, b, c, d, i.x * FFT_OUTPUT_STEP, p);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint k = (FFT_OUTPUT_STEP * i.x) & (p - 1u);)DELIM" "\n"
R"DELIM(uint j = ((FFT_OUTPUT_STEP * i.x - k) * 4u) + k;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store(ivec2(j + 0u * p, i.y), a);)DELIM" "\n"
R"DELIM(store(ivec2(j + 1u * p, i.y), c);)DELIM" "\n"
R"DELIM(store(ivec2(j + 2u * p, i.y), b);)DELIM" "\n"
R"DELIM(store(ivec2(j + 3u * p, i.y), d);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_global(offset + ((j + 0u * p) >> FFT_OUTPUT_SHIFT), a);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + 1u * p) >> FFT_OUTPUT_SHIFT), c);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + 2u * p) >> FFT_OUTPUT_SHIFT), b);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + 3u * p) >> FFT_OUTPUT_SHIFT), d);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT4_vert(uvec2 i, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec2 quarter_samples = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;)DELIM" "\n"
R"DELIM(uint stride = uStride;)DELIM" "\n"
R"DELIM(uint y_stride = stride * quarter_samples.y;)DELIM" "\n"
R"DELIM(uint offset = stride * i.y;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(cfloat a = load_global(offset + i.x + 0u * y_stride);)DELIM" "\n"
R"DELIM(cfloat b = load_global(offset + i.x + 1u * y_stride);)DELIM" "\n"
R"DELIM(cfloat c = load_global(offset + i.x + 2u * y_stride);)DELIM" "\n"
R"DELIM(cfloat d = load_global(offset + i.x + 3u * y_stride);)DELIM" "\n"
R"DELIM(FFT4(a, b, c, d, i.y, p);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint k = i.y & (p - 1u);)DELIM" "\n"
R"DELIM(uint j = ((i.y - k) * 4u) + k;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + 0u * p), a);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + 1u * p), c);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + 2u * p), b);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + 3u * p), d);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_global(stride * (j + 0u * p) + i.x, a);)DELIM" "\n"
R"DELIM(store_global(stride * (j + 1u * p) + i.x, c);)DELIM" "\n"
R"DELIM(store_global(stride * (j + 2u * p) + i.x, b);)DELIM" "\n"
R"DELIM(store_global(stride * (j + 3u * p) + i.x, d);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
;
}}
#endif
