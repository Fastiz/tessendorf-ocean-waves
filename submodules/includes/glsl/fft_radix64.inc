// This file is autogenerated by shader_to_inc.sh.
#ifndef fft_radix64_inc__
#define fft_radix64_inc__
namespace GLFFT { namespace Blob {
static const char fft_radix64_source[] = 
R"DELIM(/* Copyright (C) 2015 Hans-Kristian Arntzen <maister@archlinux.us>)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* Permission is hereby granted, free of charge,)DELIM" "\n"
R"DELIM(* to any person obtaining a copy of this software and associated documentation files (the "Software"),)DELIM" "\n"
R"DELIM(* to deal in the Software without restriction, including without limitation the rights to)DELIM" "\n"
R"DELIM(* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,)DELIM" "\n"
R"DELIM(* and to permit persons to whom the Software is furnished to do so, subject to the following conditions:)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,)DELIM" "\n"
R"DELIM(* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,)DELIM" "\n"
R"DELIM(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.)DELIM" "\n"
R"DELIM(* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,)DELIM" "\n"
R"DELIM(* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,)DELIM" "\n"
R"DELIM(* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.)DELIM" "\n"
R"DELIM(*/)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Basically the same as FFT16, but 2xFFT-8. See comments in fft_radix16.comp for more.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT64_p1_horiz(uvec2 i))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uint octa_samples = gl_NumWorkGroups.x * gl_WorkGroupSize.x;)DELIM" "\n"
R"DELIM(uint offset = i.y * octa_samples * 64u;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint fft = gl_LocalInvocationID.x;)DELIM" "\n"
R"DELIM(uint block = gl_LocalInvocationID.z;)DELIM" "\n"
R"DELIM(uint base = get_shared_base(fft);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_TEXTURE)DELIM" "\n"
R"DELIM(cfloat a = load_texture(i + uvec2((block +  0u) * octa_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat b = load_texture(i + uvec2((block +  8u) * octa_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat c = load_texture(i + uvec2((block + 16u) * octa_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat d = load_texture(i + uvec2((block + 24u) * octa_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat e = load_texture(i + uvec2((block + 32u) * octa_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat f = load_texture(i + uvec2((block + 40u) * octa_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat g = load_texture(i + uvec2((block + 48u) * octa_samples, 0u));)DELIM" "\n"
R"DELIM(cfloat h = load_texture(i + uvec2((block + 56u) * octa_samples, 0u));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(cfloat a = load_global(offset + i.x + (block +  0u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat b = load_global(offset + i.x + (block +  8u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat c = load_global(offset + i.x + (block + 16u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat d = load_global(offset + i.x + (block + 24u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat e = load_global(offset + i.x + (block + 32u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat f = load_global(offset + i.x + (block + 40u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat g = load_global(offset + i.x + (block + 48u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat h = load_global(offset + i.x + (block + 56u) * octa_samples);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(FFT8_p1(a, b, c, d, e, f, g, h);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(store_shared(a, b, c, d, e, f, g, h, block, base);)DELIM" "\n"
R"DELIM(load_shared(a, b, c, d, e, f, g, h, block, base);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(const uint p = 8u;)DELIM" "\n"
R"DELIM(FFT8(a, b, c, d, e, f, g, h, FFT_OUTPUT_STEP * block, p);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint k = (FFT_OUTPUT_STEP * block) & (p - 1u);)DELIM" "\n"
R"DELIM(uint j = ((FFT_OUTPUT_STEP * block - k) * 8u) + k;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store_global(offset + 64u * i.x + ((j + 0u * p) >> FFT_OUTPUT_SHIFT), a);)DELIM" "\n"
R"DELIM(store_global(offset + 64u * i.x + ((j + 1u * p) >> FFT_OUTPUT_SHIFT), e);)DELIM" "\n"
R"DELIM(store_global(offset + 64u * i.x + ((j + 2u * p) >> FFT_OUTPUT_SHIFT), c);)DELIM" "\n"
R"DELIM(store_global(offset + 64u * i.x + ((j + 3u * p) >> FFT_OUTPUT_SHIFT), g);)DELIM" "\n"
R"DELIM(store_global(offset + 64u * i.x + ((j + 4u * p) >> FFT_OUTPUT_SHIFT), b);)DELIM" "\n"
R"DELIM(store_global(offset + 64u * i.x + ((j + 5u * p) >> FFT_OUTPUT_SHIFT), f);)DELIM" "\n"
R"DELIM(store_global(offset + 64u * i.x + ((j + 6u * p) >> FFT_OUTPUT_SHIFT), d);)DELIM" "\n"
R"DELIM(store_global(offset + 64u * i.x + ((j + 7u * p) >> FFT_OUTPUT_SHIFT), h);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT64_horiz(uvec2 i, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uint octa_samples = gl_NumWorkGroups.x * gl_WorkGroupSize.x;)DELIM" "\n"
R"DELIM(uint offset = i.y * octa_samples * 64u;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint fft = gl_LocalInvocationID.x;)DELIM" "\n"
R"DELIM(uint block = gl_LocalInvocationID.z;)DELIM" "\n"
R"DELIM(uint base = get_shared_base(fft);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(cfloat a = load_global(offset + i.x + (block +  0u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat b = load_global(offset + i.x + (block +  8u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat c = load_global(offset + i.x + (block + 16u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat d = load_global(offset + i.x + (block + 24u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat e = load_global(offset + i.x + (block + 32u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat f = load_global(offset + i.x + (block + 40u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat g = load_global(offset + i.x + (block + 48u) * octa_samples);)DELIM" "\n"
R"DELIM(cfloat h = load_global(offset + i.x + (block + 56u) * octa_samples);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(FFT8(a, b, c, d, e, f, g, h, FFT_OUTPUT_STEP * i.x, p);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(store_shared(a, b, c, d, e, f, g, h, block, base);)DELIM" "\n"
R"DELIM(load_shared(a, b, c, d, e, f, g, h, block, base);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint k = (FFT_OUTPUT_STEP * i.x) & (p - 1u);)DELIM" "\n"
R"DELIM(uint j = ((FFT_OUTPUT_STEP * i.x - k) * 64u) + k;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(FFT8(a, b, c, d, e, f, g, h, k + block * p, 8u * p);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store(ivec2(j + (block +  0u) * p, i.y), a);)DELIM" "\n"
R"DELIM(store(ivec2(j + (block +  8u) * p, i.y), e);)DELIM" "\n"
R"DELIM(store(ivec2(j + (block + 16u) * p, i.y), c);)DELIM" "\n"
R"DELIM(store(ivec2(j + (block + 24u) * p, i.y), g);)DELIM" "\n"
R"DELIM(store(ivec2(j + (block + 32u) * p, i.y), b);)DELIM" "\n"
R"DELIM(store(ivec2(j + (block + 40u) * p, i.y), f);)DELIM" "\n"
R"DELIM(store(ivec2(j + (block + 48u) * p, i.y), d);)DELIM" "\n"
R"DELIM(store(ivec2(j + (block + 56u) * p, i.y), h);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_global(offset + ((j + (block +  0u) * p) >> FFT_OUTPUT_SHIFT), a);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + (block +  8u) * p) >> FFT_OUTPUT_SHIFT), e);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + (block + 16u) * p) >> FFT_OUTPUT_SHIFT), c);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + (block + 24u) * p) >> FFT_OUTPUT_SHIFT), g);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + (block + 32u) * p) >> FFT_OUTPUT_SHIFT), b);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + (block + 40u) * p) >> FFT_OUTPUT_SHIFT), f);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + (block + 48u) * p) >> FFT_OUTPUT_SHIFT), d);)DELIM" "\n"
R"DELIM(store_global(offset + ((j + (block + 56u) * p) >> FFT_OUTPUT_SHIFT), h);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT64_p1_vert(uvec2 i))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec2 octa_samples = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;)DELIM" "\n"
R"DELIM(uint stride = uStride;)DELIM" "\n"
R"DELIM(uint y_stride = stride * octa_samples.y;)DELIM" "\n"
R"DELIM(uint offset = stride * i.y;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint fft = gl_LocalInvocationID.x;)DELIM" "\n"
R"DELIM(uint block = gl_LocalInvocationID.z;)DELIM" "\n"
R"DELIM(uint base = get_shared_base(fft);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_TEXTURE)DELIM" "\n"
R"DELIM(cfloat a = load_texture(i + uvec2(0u, (block +  0u) * octa_samples.y));)DELIM" "\n"
R"DELIM(cfloat b = load_texture(i + uvec2(0u, (block +  8u) * octa_samples.y));)DELIM" "\n"
R"DELIM(cfloat c = load_texture(i + uvec2(0u, (block + 16u) * octa_samples.y));)DELIM" "\n"
R"DELIM(cfloat d = load_texture(i + uvec2(0u, (block + 24u) * octa_samples.y));)DELIM" "\n"
R"DELIM(cfloat e = load_texture(i + uvec2(0u, (block + 32u) * octa_samples.y));)DELIM" "\n"
R"DELIM(cfloat f = load_texture(i + uvec2(0u, (block + 40u) * octa_samples.y));)DELIM" "\n"
R"DELIM(cfloat g = load_texture(i + uvec2(0u, (block + 48u) * octa_samples.y));)DELIM" "\n"
R"DELIM(cfloat h = load_texture(i + uvec2(0u, (block + 56u) * octa_samples.y));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(cfloat a = load_global(offset + i.x + (block +  0u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat b = load_global(offset + i.x + (block +  8u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat c = load_global(offset + i.x + (block + 16u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat d = load_global(offset + i.x + (block + 24u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat e = load_global(offset + i.x + (block + 32u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat f = load_global(offset + i.x + (block + 40u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat g = load_global(offset + i.x + (block + 48u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat h = load_global(offset + i.x + (block + 56u) * y_stride);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(FFT8_p1(a, b, c, d, e, f, g, h);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(store_shared(a, b, c, d, e, f, g, h, block, base);)DELIM" "\n"
R"DELIM(load_shared(a, b, c, d, e, f, g, h, block, base);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(const uint p = 8u;)DELIM" "\n"
R"DELIM(FFT8(a, b, c, d, e, f, g, h, block, p);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store_global((64u * i.y + block +  0u) * stride + i.x, a);)DELIM" "\n"
R"DELIM(store_global((64u * i.y + block +  8u) * stride + i.x, e);)DELIM" "\n"
R"DELIM(store_global((64u * i.y + block + 16u) * stride + i.x, c);)DELIM" "\n"
R"DELIM(store_global((64u * i.y + block + 24u) * stride + i.x, g);)DELIM" "\n"
R"DELIM(store_global((64u * i.y + block + 32u) * stride + i.x, b);)DELIM" "\n"
R"DELIM(store_global((64u * i.y + block + 40u) * stride + i.x, f);)DELIM" "\n"
R"DELIM(store_global((64u * i.y + block + 48u) * stride + i.x, d);)DELIM" "\n"
R"DELIM(store_global((64u * i.y + block + 56u) * stride + i.x, h);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT64_vert(uvec2 i, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec2 octa_samples = gl_NumWorkGroups.xy * gl_WorkGroupSize.xy;)DELIM" "\n"
R"DELIM(uint stride = uStride;)DELIM" "\n"
R"DELIM(uint y_stride = stride * octa_samples.y;)DELIM" "\n"
R"DELIM(uint offset = stride * i.y;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint fft = gl_LocalInvocationID.x;)DELIM" "\n"
R"DELIM(uint block = gl_LocalInvocationID.z;)DELIM" "\n"
R"DELIM(uint base = get_shared_base(fft);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(cfloat a = load_global(offset + i.x + (block +  0u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat b = load_global(offset + i.x + (block +  8u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat c = load_global(offset + i.x + (block + 16u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat d = load_global(offset + i.x + (block + 24u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat e = load_global(offset + i.x + (block + 32u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat f = load_global(offset + i.x + (block + 40u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat g = load_global(offset + i.x + (block + 48u) * y_stride);)DELIM" "\n"
R"DELIM(cfloat h = load_global(offset + i.x + (block + 56u) * y_stride);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(FFT8(a, b, c, d, e, f, g, h, i.y, p);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(store_shared(a, b, c, d, block, base);)DELIM" "\n"
R"DELIM(load_shared(a, b, c, d, block, base);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint k = i.y & (p - 1u);)DELIM" "\n"
R"DELIM(uint j = ((i.y - k) * 64u) + k;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(FFT8(a, b, c, d, e, f, g, h, k + block * p, 8u * p);)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + (block +  0u) * p), a);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + (block +  8u) * p), e);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + (block + 16u) * p), c);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + (block + 24u) * p), g);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + (block + 32u) * p), b);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + (block + 40u) * p), f);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + (block + 48u) * p), d);)DELIM" "\n"
R"DELIM(store(ivec2(i.x, j + (block + 56u) * p), h);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_global(stride * (j + (block +  0u) * p) + i.x, a);)DELIM" "\n"
R"DELIM(store_global(stride * (j + (block +  8u) * p) + i.x, e);)DELIM" "\n"
R"DELIM(store_global(stride * (j + (block + 16u) * p) + i.x, c);)DELIM" "\n"
R"DELIM(store_global(stride * (j + (block + 24u) * p) + i.x, g);)DELIM" "\n"
R"DELIM(store_global(stride * (j + (block + 32u) * p) + i.x, b);)DELIM" "\n"
R"DELIM(store_global(stride * (j + (block + 40u) * p) + i.x, f);)DELIM" "\n"
R"DELIM(store_global(stride * (j + (block + 48u) * p) + i.x, d);)DELIM" "\n"
R"DELIM(store_global(stride * (j + (block + 56u) * p) + i.x, h);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
;
}}
#endif
