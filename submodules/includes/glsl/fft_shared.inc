// This file is autogenerated by shader_to_inc.sh.
#ifndef fft_shared_inc__
#define fft_shared_inc__
namespace GLFFT { namespace Blob {
static const char fft_shared_source[] = 
R"DELIM(/* Copyright (C) 2015 Hans-Kristian Arntzen <maister@archlinux.us>)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* Permission is hereby granted, free of charge,)DELIM" "\n"
R"DELIM(* to any person obtaining a copy of this software and associated documentation files (the "Software"),)DELIM" "\n"
R"DELIM(* to deal in the Software without restriction, including without limitation the rights to)DELIM" "\n"
R"DELIM(* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,)DELIM" "\n"
R"DELIM(* and to permit persons to whom the Software is furnished to do so, subject to the following conditions:)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,)DELIM" "\n"
R"DELIM(* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,)DELIM" "\n"
R"DELIM(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.)DELIM" "\n"
R"DELIM(* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,)DELIM" "\n"
R"DELIM(* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,)DELIM" "\n"
R"DELIM(* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.)DELIM" "\n"
R"DELIM(*/)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Most (all?) desktop GPUs have banked shared memory.)DELIM" "\n"
R"DELIM(// We want to avoid bank conflicts as much as possible.)DELIM" "\n"
R"DELIM(// If we don't pad the shared memory, threads in the same warp/wavefront will hit the same)DELIM" "\n"
R"DELIM(// shared memory banks, and stall as each bank and only process a fixed number of requests per cycle.)DELIM" "\n"
R"DELIM(// By padding, we "smear" out the requests to more banks, which greatly improves performance.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// For architectures without banked shared memory,)DELIM" "\n"
R"DELIM(// this design makes no sense, so it's a pretty important performance bit to set correctly.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_SHARED_BANKED)DELIM" "\n"
R"DELIM(#error FFT_SHARED_BANKED must be defined.)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if FFT_SHARED_BANKED)DELIM" "\n"
R"DELIM(#define FFT_BANK_CONFLICT_PADDING 1u)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define FFT_BANK_CONFLICT_PADDING 0u)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#define FFT_SHARED_SIZE (uint(FFT_RADIX) + FFT_BANK_CONFLICT_PADDING))DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uint get_shared_base(uint fft))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return FFT_SHARED_SIZE * (gl_LocalInvocationID.y * gl_WorkGroupSize.x + fft);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if FFT_SHARED_BANKED)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Implementations with banked shared memory like to write 32-bit at a time,)DELIM" "\n"
R"DELIM(// since that's typically how big transactions each shared memory bank can handle.)DELIM" "\n"
R"DELIM(// If we try to write vec4s in one go (which will get split up to 4 writes anyways),)DELIM" "\n"
R"DELIM(// we end up with 4-way bank conflicts no matter what we do.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if defined(FFT_VEC8))DELIM" "\n"
R"DELIM(shared uint tmpx[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM(shared uint tmpy[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM(shared uint tmpz[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM(shared uint tmpw[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(shared float tmpx[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM(shared float tmpy[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM(#if defined(FFT_VEC4))DELIM" "\n"
R"DELIM(shared float tmpz[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM(shared float tmpw[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void store_shared(uint offset, cfloat v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(tmpx[offset] = v.x;)DELIM" "\n"
R"DELIM(tmpy[offset] = v.y;)DELIM" "\n"
R"DELIM(#if defined(FFT_VEC4) || defined(FFT_VEC8))DELIM" "\n"
R"DELIM(tmpz[offset] = v.z;)DELIM" "\n"
R"DELIM(tmpw[offset] = v.w;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void load_shared(uint offset, out cfloat v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(v.x = tmpx[offset];)DELIM" "\n"
R"DELIM(v.y = tmpy[offset];)DELIM" "\n"
R"DELIM(#if defined(FFT_VEC4) || defined(FFT_VEC8))DELIM" "\n"
R"DELIM(v.z = tmpz[offset];)DELIM" "\n"
R"DELIM(v.w = tmpw[offset];)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(// For non-banked architectures, just store and load directly.)DELIM" "\n"
R"DELIM(shared cfloat tmp[FFT_SHARED_SIZE * gl_WorkGroupSize.x * gl_WorkGroupSize.y];)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void store_shared(uint offset, cfloat v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(tmp[offset] = v;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void load_shared(uint offset, out cfloat v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(v = tmp[offset];)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void store_shared(cfloat a, cfloat b, cfloat c, cfloat d, uint block, uint base))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(// Interleave and write out in bit-reversed order.)DELIM" "\n"
R"DELIM(#if FFT_CVECTOR_SIZE == 4)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 0u, cfloat(a.x, c.x, b.x, d.x));)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 1u, cfloat(a.y, c.y, b.y, d.y));)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 2u, cfloat(a.z, c.z, b.z, d.z));)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 3u, cfloat(a.w, c.w, b.w, d.w));)DELIM" "\n"
R"DELIM(#elif FFT_CVECTOR_SIZE == 2)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 0u, cfloat(a.xy, c.xy));)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 1u, cfloat(b.xy, d.xy));)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 2u, cfloat(a.zw, c.zw));)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 3u, cfloat(b.zw, d.zw));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 0u, a);)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 1u, c);)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 2u, b);)DELIM" "\n"
R"DELIM(store_shared(base + 4u * block + 3u, d);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(memoryBarrierShared();)DELIM" "\n"
R"DELIM(barrier();)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void load_shared(out cfloat a, out cfloat b, out cfloat c, out cfloat d, uint block, uint base))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(load_shared(base + block + 0u * gl_WorkGroupSize.z, a);)DELIM" "\n"
R"DELIM(load_shared(base + block + 1u * gl_WorkGroupSize.z, b);)DELIM" "\n"
R"DELIM(load_shared(base + block + 2u * gl_WorkGroupSize.z, c);)DELIM" "\n"
R"DELIM(load_shared(base + block + 3u * gl_WorkGroupSize.z, d);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void store_shared(cfloat a, cfloat b, cfloat c, cfloat d, cfloat e, cfloat f, cfloat g, cfloat h, uint block, uint base))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(// Interleave and write out in bit-reversed order.)DELIM" "\n"
R"DELIM(#if FFT_CVECTOR_SIZE == 4)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 0u, cfloat(a.x, e.x, c.x, g.x));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 1u, cfloat(b.x, f.x, d.x, h.x));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 2u, cfloat(a.y, e.y, c.y, g.y));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 3u, cfloat(b.y, f.y, d.y, h.y));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 4u, cfloat(a.z, e.z, c.z, g.z));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 5u, cfloat(b.z, f.z, d.z, h.z));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 6u, cfloat(a.w, e.w, c.w, g.w));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 7u, cfloat(b.w, f.w, d.w, h.w));)DELIM" "\n"
R"DELIM(#elif FFT_CVECTOR_SIZE == 2)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 0u, cfloat(a.xy, e.xy));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 1u, cfloat(c.xy, g.xy));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 2u, cfloat(b.xy, f.xy));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 3u, cfloat(d.xy, h.xy));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 4u, cfloat(a.zw, e.zw));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 5u, cfloat(c.zw, g.zw));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 6u, cfloat(b.zw, f.zw));)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 7u, cfloat(d.zw, h.zw));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 0u, a);)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 1u, e);)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 2u, c);)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 3u, g);)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 4u, b);)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 5u, f);)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 6u, d);)DELIM" "\n"
R"DELIM(store_shared(base + 8u * block + 7u, h);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(memoryBarrierShared();)DELIM" "\n"
R"DELIM(barrier();)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void load_shared(out cfloat a, out cfloat b, out cfloat c, out cfloat d, out cfloat e, out cfloat f, out cfloat g, out cfloat h, uint block, uint base))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(load_shared(base + block + 0u * gl_WorkGroupSize.z, a);)DELIM" "\n"
R"DELIM(load_shared(base + block + 1u * gl_WorkGroupSize.z, b);)DELIM" "\n"
R"DELIM(load_shared(base + block + 2u * gl_WorkGroupSize.z, c);)DELIM" "\n"
R"DELIM(load_shared(base + block + 3u * gl_WorkGroupSize.z, d);)DELIM" "\n"
R"DELIM(load_shared(base + block + 4u * gl_WorkGroupSize.z, e);)DELIM" "\n"
R"DELIM(load_shared(base + block + 5u * gl_WorkGroupSize.z, f);)DELIM" "\n"
R"DELIM(load_shared(base + block + 6u * gl_WorkGroupSize.z, g);)DELIM" "\n"
R"DELIM(load_shared(base + block + 7u * gl_WorkGroupSize.z, h);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
;
}}
#endif
