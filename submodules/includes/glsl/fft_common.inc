// This file is autogenerated by shader_to_inc.sh.
#ifndef fft_common_inc__
#define fft_common_inc__
namespace GLFFT { namespace Blob {
static const char fft_common_source[] = 
R"DELIM(/* Copyright (C) 2015 Hans-Kristian Arntzen <maister@archlinux.us>)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* Permission is hereby granted, free of charge,)DELIM" "\n"
R"DELIM(* to any person obtaining a copy of this software and associated documentation files (the "Software"),)DELIM" "\n"
R"DELIM(* to deal in the Software without restriction, including without limitation the rights to)DELIM" "\n"
R"DELIM(* use, copy, modify, merge, publish, distribute, sublicense, and/or sell copies of the Software,)DELIM" "\n"
R"DELIM(* and to permit persons to whom the Software is furnished to do so, subject to the following conditions:)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* The above copyright notice and this permission notice shall be included in all copies or substantial portions of the Software.)DELIM" "\n"
R"DELIM(*)DELIM" "\n"
R"DELIM(* THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR IMPLIED,)DELIM" "\n"
R"DELIM(* INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,)DELIM" "\n"
R"DELIM(* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.)DELIM" "\n"
R"DELIM(* IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER LIABILITY,)DELIM" "\n"
R"DELIM(* WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,)DELIM" "\n"
R"DELIM(* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.)DELIM" "\n"
R"DELIM(*/)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if defined(FFT_FP16) && defined(GL_ES))DELIM" "\n"
R"DELIM(precision mediump float;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#define BINDING_SSBO_IN 0)DELIM" "\n"
R"DELIM(#define BINDING_SSBO_OUT 1)DELIM" "\n"
R"DELIM(#define BINDING_SSBO_AUX 2)DELIM" "\n"
R"DELIM(#define BINDING_UBO 3)DELIM" "\n"
R"DELIM(#define BINDING_TEXTURE0 4)DELIM" "\n"
R"DELIM(#define BINDING_TEXTURE1 5)DELIM" "\n"
R"DELIM(#define BINDING_IMAGE 6)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(layout(std140, binding = BINDING_UBO) uniform UBO)DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec4 p_stride_padding;)DELIM" "\n"
R"DELIM(vec4 texture_offset_scale;)DELIM" "\n"
R"DELIM(} constant_data;)DELIM" "\n"
R"DELIM(#define uStride constant_data.p_stride_padding.y)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// cfloat is the "generic" type used to hold complex data.)DELIM" "\n"
R"DELIM(// GLFFT supports vec2, vec4 and "vec8" for its complex data)DELIM" "\n"
R"DELIM(// to be able to work on 1, 2 and 4 complex values in a single vector.)DELIM" "\n"
R"DELIM(// FFT_VEC2, FFT_VEC4, FFT_VEC8 defines which type we're using.)DELIM" "\n"
R"DELIM(// The shaders are compiled on-demand.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// FP16 values are packed as 2xfp16 in a uint.)DELIM" "\n"
R"DELIM(// packHalf2x16 and unpackHalf2x16 are used to bitcast between these formats.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// The complex number format is (real, imag, real, imag, ...) in an interleaved fashion.)DELIM" "\n"
R"DELIM(// For complex-to-real or real-to-complex transforms, we consider two adjacent real samples to be a complex number as-is.)DELIM" "\n"
R"DELIM(// Separate "resolve" passes are added to make the transform correct.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if defined(FFT_VEC2))DELIM" "\n"
R"DELIM(#define cfloat vec2)DELIM" "\n"
R"DELIM(#define cfloat_buffer_fp16 uint)DELIM" "\n"
R"DELIM(#elif defined(FFT_VEC4))DELIM" "\n"
R"DELIM(#define cfloat vec4)DELIM" "\n"
R"DELIM(#define cfloat_buffer_fp16 uvec2)DELIM" "\n"
R"DELIM(#elif defined(FFT_VEC8))DELIM" "\n"
R"DELIM(#if !defined(FFT_INPUT_FP16) || !defined(FFT_OUTPUT_FP16) || !defined(FFT_FP16))DELIM" "\n"
R"DELIM(#error FFT_VEC8 must use FP16 everywhere.)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#define cfloat uvec4)DELIM" "\n"
R"DELIM(#define cfloat_buffer_fp16 uvec4)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#error FFT_VEC2, FFT_VEC4 or FFT_VEC8 must be defined.)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_FP16)DELIM" "\n"
R"DELIM(#define cfloat_buffer_in cfloat_buffer_fp16)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define cfloat_buffer_in cfloat)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_FP16)DELIM" "\n"
R"DELIM(#define cfloat_buffer_out cfloat_buffer_fp16)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define cfloat_buffer_out cfloat)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Normally this would be sqrt(1 / radix), but we'd have to apply normalization)DELIM" "\n"
R"DELIM(// for every pass instead of just half of them. Also, 1 / 2^n is "lossless" in FP math.)DELIM" "\n"
R"DELIM(#ifdef FFT_NORMALIZE)DELIM" "\n"
R"DELIM(#define FFT_NORM_FACTOR (1.0 / float(FFT_RADIX)))DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// FFT_CVECTOR_SIZE defines an interleaving stride for the first pass.)DELIM" "\n"
R"DELIM(// The first FFT pass with stockham autosort needs to do some shuffling around if we're processing)DELIM" "\n"
R"DELIM(// more than one complex value per vector.)DELIM" "\n"
R"DELIM(// This is only needed for horizontal transforms since we vectorize horizontally and different elements)DELIM" "\n"
R"DELIM(// in the vector are from different transforms when we do vertical transforms.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if defined(FFT_P1) && !defined(FFT_DUAL) && defined(FFT_HORIZ) && defined(FFT_VEC8))DELIM" "\n"
R"DELIM(#define FFT_CVECTOR_SIZE 4)DELIM" "\n"
R"DELIM(#elif defined(FFT_P1) && ((!defined(FFT_DUAL) && defined(FFT_HORIZ) && defined(FFT_VEC4)) || (defined(FFT_DUAL) && defined(FFT_HORIZ) && defined(FFT_VEC8))))DELIM" "\n"
R"DELIM(#define FFT_CVECTOR_SIZE 2)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define FFT_CVECTOR_SIZE 1)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef GL_ES)DELIM" "\n"
R"DELIM(#define FFT_HIGHP highp)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define FFT_HIGHP)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_VEC8)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Currently unlikely to be useful.)DELIM" "\n"
R"DELIM(uvec4 PADD(uvec4 a, uvec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return uvec4()DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.x) + unpackHalf2x16(b.x)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.y) + unpackHalf2x16(b.y)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.z) + unpackHalf2x16(b.z)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.w) + unpackHalf2x16(b.w)));)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uvec4 PSUB(uvec4 a, uvec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return uvec4()DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.x) - unpackHalf2x16(b.x)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.y) - unpackHalf2x16(b.y)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.z) - unpackHalf2x16(b.z)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.w) - unpackHalf2x16(b.w)));)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uvec4 PMUL(uvec4 a, uvec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return uvec4()DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.x) * unpackHalf2x16(b.x)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.y) * unpackHalf2x16(b.y)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.z) * unpackHalf2x16(b.z)),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(a.w) * unpackHalf2x16(b.w)));)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uvec4 CONJ_SWIZZLE(uvec4 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return uvec4()DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.x).yx),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.y).yx),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.z).yx),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.w).yx));)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uvec4 LDUP_SWIZZLE(uvec4 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return uvec4()DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.x).xx),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.y).xx),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.z).xx),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.w).xx));)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uvec4 HDUP_SWIZZLE(uvec4 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return uvec4()DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.x).yy),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.y).yy),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.z).yy),)DELIM" "\n"
R"DELIM(packHalf2x16(unpackHalf2x16(v.w).yy));)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Sign-flip. Works for the cases we're interested in.)DELIM" "\n"
R"DELIM(uvec4 cmul_minus_j(uvec4 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return uvec4(0x80000000u) ^ CONJ_SWIZZLE(v);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uvec4 cmul_plus_j(uvec4 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return uvec4(0x00008000u) ^ CONJ_SWIZZLE(v);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(uvec4 cmul(uvec4 a, uvec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec4 r3 = CONJ_SWIZZLE(a);)DELIM" "\n"
R"DELIM(uvec4 r1 = LDUP_SWIZZLE(b);)DELIM" "\n"
R"DELIM(uvec4 R0 = PMUL(a, r1);)DELIM" "\n"
R"DELIM(uvec4 r2 = HDUP_SWIZZLE(b);)DELIM" "\n"
R"DELIM(uvec4 R1 = PMUL(r2, r3);)DELIM" "\n"
R"DELIM(return PADD(R0, uvec4(0x8000u) ^ R1);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly(inout uvec4 a, inout uvec4 b, uvec4 w))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec4 t = cmul(b, w);)DELIM" "\n"
R"DELIM(b = PSUB(a, t);)DELIM" "\n"
R"DELIM(a = PADD(a, t);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly(inout uvec4 a, inout uvec4 b, vec4 w))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec4 t = cmul(b, uvec2(packHalf2x16(w.xy), packHalf2x16(w.zw)).xxyy);)DELIM" "\n"
R"DELIM(b = PSUB(a, t);)DELIM" "\n"
R"DELIM(a = PADD(a, t);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly(inout uvec4 a, inout uvec4 b, vec2 w))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec4 t = cmul(b, uvec4(packHalf2x16(w)));)DELIM" "\n"
R"DELIM(b = PSUB(a, t);)DELIM" "\n"
R"DELIM(a = PADD(a, t);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly_p1(inout uvec4 a, inout uvec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec4 t = b;)DELIM" "\n"
R"DELIM(b = PSUB(a, t);)DELIM" "\n"
R"DELIM(a = PADD(a, t);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly_p1_minus_j(inout uvec4 a, inout uvec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec4 t = b;)DELIM" "\n"
R"DELIM(b = uvec4(0x80000000u) ^ (PSUB(CONJ_SWIZZLE(a), CONJ_SWIZZLE(t)));)DELIM" "\n"
R"DELIM(a = PADD(a, t);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly_p1_plus_j(inout uvec4 a, inout uvec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uvec4 t = b;)DELIM" "\n"
R"DELIM(b = uvec4(0x00008000u) ^ (PSUB(CONJ_SWIZZLE(a), CONJ_SWIZZLE(t)));)DELIM" "\n"
R"DELIM(a = PADD(a, t);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Complex multiply.)DELIM" "\n"
R"DELIM(vec4 cmul(vec4 a, vec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec4 r3 = a.yxwz;)DELIM" "\n"
R"DELIM(vec4 r1 = b.xxzz;)DELIM" "\n"
R"DELIM(vec4 R0 = a * r1;)DELIM" "\n"
R"DELIM(vec4 r2 = b.yyww;)DELIM" "\n"
R"DELIM(vec4 R1 = r2 * r3;)DELIM" "\n"
R"DELIM(return R0 + vec4(-R1.x, R1.y, -R1.z, R1.w);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(vec2 cmul(vec2 a, vec2 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec2 r3 = a.yx;)DELIM" "\n"
R"DELIM(vec2 r1 = b.xx;)DELIM" "\n"
R"DELIM(vec2 R0 = a * r1;)DELIM" "\n"
R"DELIM(vec2 r2 = b.yy;)DELIM" "\n"
R"DELIM(vec2 R1 = r2 * r3;)DELIM" "\n"
R"DELIM(return R0 + vec2(-R1.x, R1.y);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_TEXTURE)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_P1)DELIM" "\n"
R"DELIM(#error Input texture can only be used when P == 1.)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef GL_ES)DELIM" "\n"
R"DELIM(#if defined(FFT_INPUT_FP16) || defined(FFT_FP16))DELIM" "\n"
R"DELIM(precision mediump sampler2D;)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(precision highp sampler2D;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#define uTexelOffset constant_data.texture_offset_scale.xy)DELIM" "\n"
R"DELIM(#define uTexelScale constant_data.texture_offset_scale.zw)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(layout(binding = BINDING_TEXTURE0) uniform sampler2D uTexture;)DELIM" "\n"
R"DELIM(#ifdef FFT_CONVOLVE)DELIM" "\n"
R"DELIM(layout(binding = BINDING_TEXTURE1) uniform sampler2D uTexture2;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(cfloat load_texture(sampler2D sampler, uvec2 coord))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(FFT_HIGHP vec2 uv = vec2(coord) * uTexelScale + uTexelOffset;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Quite messy, this :))DELIM" "\n"
R"DELIM(#if defined(FFT_VEC8))DELIM" "\n"
R"DELIM(#if defined(FFT_INPUT_REAL))DELIM" "\n"
R"DELIM(return uvec4()DELIM" "\n"
R"DELIM(packHalf2x16(vec2(textureLodOffset(sampler, uv, 0.0, ivec2(0, 0)).x, textureLodOffset(sampler, uv, 0.0, ivec2(1, 0)).x)),)DELIM" "\n"
R"DELIM(packHalf2x16(vec2(textureLodOffset(sampler, uv, 0.0, ivec2(2, 0)).x, textureLodOffset(sampler, uv, 0.0, ivec2(3, 0)).x)),)DELIM" "\n"
R"DELIM(packHalf2x16(vec2(textureLodOffset(sampler, uv, 0.0, ivec2(4, 0)).x, textureLodOffset(sampler, uv, 0.0, ivec2(5, 0)).x)),)DELIM" "\n"
R"DELIM(packHalf2x16(vec2(textureLodOffset(sampler, uv, 0.0, ivec2(6, 0)).x, textureLodOffset(sampler, uv, 0.0, ivec2(7, 0)).x)));)DELIM" "\n"
R"DELIM(#elif defined(FFT_DUAL))DELIM" "\n"
R"DELIM(vec4 c0 = textureLodOffset(sampler, uv, 0.0, ivec2(0, 0));)DELIM" "\n"
R"DELIM(vec4 c1 = textureLodOffset(sampler, uv, 0.0, ivec2(1, 0));)DELIM" "\n"
R"DELIM(return uvec4(packHalf2x16(c0.xy), packHalf2x16(c0.zw), packHalf2x16(c1.xy), packHalf2x16(c1.zw));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(return uvec4()DELIM" "\n"
R"DELIM(packHalf2x16(textureLodOffset(sampler, uv, 0.0, ivec2(0, 0)).xy),)DELIM" "\n"
R"DELIM(packHalf2x16(textureLodOffset(sampler, uv, 0.0, ivec2(1, 0)).xy),)DELIM" "\n"
R"DELIM(packHalf2x16(textureLodOffset(sampler, uv, 0.0, ivec2(2, 0)).xy),)DELIM" "\n"
R"DELIM(packHalf2x16(textureLodOffset(sampler, uv, 0.0, ivec2(3, 0)).xy));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#elif defined(FFT_VEC4))DELIM" "\n"
R"DELIM(#if defined(FFT_INPUT_REAL))DELIM" "\n"
R"DELIM(return vec4()DELIM" "\n"
R"DELIM(textureLodOffset(sampler, uv, 0.0, ivec2(0, 0)).x,)DELIM" "\n"
R"DELIM(textureLodOffset(sampler, uv, 0.0, ivec2(1, 0)).x,)DELIM" "\n"
R"DELIM(textureLodOffset(sampler, uv, 0.0, ivec2(2, 0)).x,)DELIM" "\n"
R"DELIM(textureLodOffset(sampler, uv, 0.0, ivec2(3, 0)).x);)DELIM" "\n"
R"DELIM(#elif defined(FFT_DUAL))DELIM" "\n"
R"DELIM(return textureLod(sampler, uv, 0.0);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(return vec4()DELIM" "\n"
R"DELIM(textureLodOffset(sampler, uv, 0.0, ivec2(0, 0)).xy,)DELIM" "\n"
R"DELIM(textureLodOffset(sampler, uv, 0.0, ivec2(1, 0)).xy);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#elif defined(FFT_VEC2))DELIM" "\n"
R"DELIM(#if defined(FFT_INPUT_REAL))DELIM" "\n"
R"DELIM(return vec2()DELIM" "\n"
R"DELIM(textureLodOffset(sampler, uv, 0.0, ivec2(0, 0)).x,)DELIM" "\n"
R"DELIM(textureLodOffset(sampler, uv, 0.0, ivec2(1, 0)).x);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(return textureLod(sampler, uv, 0.0).xy;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(cfloat load_texture(uvec2 coord))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_CONVOLVE)DELIM" "\n"
R"DELIM(// Convolution in frequency domain is multiplication.)DELIM" "\n"
R"DELIM(cfloat c0 = load_texture(uTexture, coord);)DELIM" "\n"
R"DELIM(cfloat c1 = load_texture(uTexture2, coord);)DELIM" "\n"
R"DELIM(return cmul(c0, c1);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(return load_texture(uTexture, coord);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Implement a dummy load_global, or we have to #ifdef out lots of dead code elsewhere.)DELIM" "\n"
R"DELIM(#ifdef FFT_VEC8)DELIM" "\n"
R"DELIM(cfloat load_global(uint offset))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return cfloat(0u);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(cfloat load_global(uint offset))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return cfloat(0.0);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(layout(std430, binding = BINDING_SSBO_IN) readonly buffer Block)DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(cfloat_buffer_in data[];)DELIM" "\n"
R"DELIM(} fft_in;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_CONVOLVE)DELIM" "\n"
R"DELIM(layout(std430, binding = BINDING_SSBO_AUX) readonly buffer Block2)DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(cfloat_buffer_in data[];)DELIM" "\n"
R"DELIM(} fft_in2;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(cfloat load_global(uint offset))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(// Convolution in frequency domain is multiplication.)DELIM" "\n"
R"DELIM(#if defined(FFT_INPUT_FP16) && defined(FFT_VEC2))DELIM" "\n"
R"DELIM(return cmul(unpackHalf2x16(fft_in.data[offset]), unpackHalf2x16(fft_in2.data[offset]));)DELIM" "\n"
R"DELIM(#elif defined(FFT_INPUT_FP16) && defined(FFT_VEC4))DELIM" "\n"
R"DELIM(uvec2 data = fft_in.data[offset];)DELIM" "\n"
R"DELIM(uvec2 data2 = fft_in2.data[offset];)DELIM" "\n"
R"DELIM(return cmul(vec4(unpackHalf2x16(data.x), unpackHalf2x16(data.y)), vec4(unpackHalf2x16(data2.x), unpackHalf2x16(data2.y)));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(return cmul(fft_in.data[offset], fft_in2.data[offset]);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(cfloat load_global(uint offset))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#if defined(FFT_INPUT_FP16) && defined(FFT_VEC2))DELIM" "\n"
R"DELIM(return unpackHalf2x16(fft_in.data[offset]);)DELIM" "\n"
R"DELIM(#elif defined(FFT_INPUT_FP16) && defined(FFT_VEC4))DELIM" "\n"
R"DELIM(uvec2 data = fft_in.data[offset];)DELIM" "\n"
R"DELIM(return vec4(unpackHalf2x16(data.x), unpackHalf2x16(data.y));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(return fft_in.data[offset];)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(layout(std430, binding = BINDING_SSBO_OUT) writeonly buffer BlockOut)DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(cfloat_buffer_out data[];)DELIM" "\n"
R"DELIM(} fft_out;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void store_global(uint offset, cfloat v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_NORM_FACTOR)DELIM" "\n"
R"DELIM(#ifdef FFT_VEC8)DELIM" "\n"
R"DELIM(v = PMUL(uvec4(packHalf2x16(vec2(FFT_NORM_FACTOR))), v);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(v *= FFT_NORM_FACTOR;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if defined(FFT_OUTPUT_FP16) && defined(FFT_VEC2))DELIM" "\n"
R"DELIM(fft_out.data[offset] = packHalf2x16(v);)DELIM" "\n"
R"DELIM(#elif defined(FFT_OUTPUT_FP16) && defined(FFT_VEC4))DELIM" "\n"
R"DELIM(fft_out.data[offset] = uvec2(packHalf2x16(v.xy), packHalf2x16(v.zw));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(fft_out.data[offset] = v;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef GL_ES)DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_REAL)DELIM" "\n"
R"DELIM(precision highp image2D;)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(precision mediump image2D;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(precision highp uimage2D;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(//#ifdef FFT_P1)DELIM" "\n"
R"DELIM(//#error FFT_OUTPUT_IMAGE is not supported in first pass.)DELIM" "\n"
R"DELIM(//#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Currently, GLFFT only supports outputing to "fixed" formats like these.)DELIM" "\n"
R"DELIM(// Should be possible to add options for this to at least choose between FP16/FP32 output,)DELIM" "\n"
R"DELIM(// and maybe rgba8_unorm for FFT_DUAL case.)DELIM" "\n"
R"DELIM(#if defined(FFT_DUAL))DELIM" "\n"
R"DELIM(layout(rgba16f, binding = BINDING_IMAGE) uniform writeonly image2D uImage;)DELIM" "\n"
R"DELIM(#elif defined(FFT_OUTPUT_REAL))DELIM" "\n"
R"DELIM(layout(r32f, binding = BINDING_IMAGE) uniform writeonly image2D uImage;)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(// GLES 3.1 doesn't support rg16f layout for some reason, so work around it ...)DELIM" "\n"
R"DELIM(layout(r32ui, binding = BINDING_IMAGE) uniform writeonly uimage2D uImage;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void store(ivec2 coord, vec4 value))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_NORM_FACTOR)DELIM" "\n"
R"DELIM(value *= FFT_NORM_FACTOR;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if defined(FFT_DUAL))DELIM" "\n"
R"DELIM(imageStore(uImage, coord, value);)DELIM" "\n"
R"DELIM(#elif defined(FFT_HORIZ))DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_REAL)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), value.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), value.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(2, 0), value.zzzz);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(3, 0), value.wwww);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(imageStore(uImage, coord + ivec2(0, 0), uvec4(packHalf2x16(value.xy)));)DELIM" "\n"
R"DELIM(imageStore(uImage, coord + ivec2(1, 0), uvec4(packHalf2x16(value.zw)));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#elif defined(FFT_VERT))DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_REAL)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(4, 1) + ivec2(0, 0), value.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(4, 1) + ivec2(1, 0), value.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(4, 1) + ivec2(2, 0), value.zzzz);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(4, 1) + ivec2(3, 0), value.wwww);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), uvec4(packHalf2x16(value.xy)));)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), uvec4(packHalf2x16(value.zw)));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#error Inconsistent defines.)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifndef FFT_DUAL)DELIM" "\n"
R"DELIM(void store(ivec2 coord, vec2 value))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_NORM_FACTOR)DELIM" "\n"
R"DELIM(value *= FFT_NORM_FACTOR;)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if defined(FFT_HORIZ))DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_REAL)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), value.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), value.yyyy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(imageStore(uImage, coord, uvec4(packHalf2x16(value.xy)));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#elif defined(FFT_VERT))DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_REAL)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), value.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), value.yyyy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(imageStore(uImage, coord, uvec4(packHalf2x16(value.xy)));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#error Inconsistent defines.)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_VEC8)DELIM" "\n"
R"DELIM(void store(ivec2 coord, uvec4 value))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_NORM_FACTOR)DELIM" "\n"
R"DELIM(value = PMUL(value, uvec4(packHalf2x16(vec2(FFT_NORM_FACTOR))));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#if defined(FFT_DUAL))DELIM" "\n"
R"DELIM(#if defined(FFT_HORIZ))DELIM" "\n"
R"DELIM(imageStore(uImage, coord + ivec2(0, 0), vec4(unpackHalf2x16(value.x), unpackHalf2x16(value.y)));)DELIM" "\n"
R"DELIM(imageStore(uImage, coord + ivec2(1, 0), vec4(unpackHalf2x16(value.z), unpackHalf2x16(value.w)));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), vec4(unpackHalf2x16(value.x), unpackHalf2x16(value.y)));)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), vec4(unpackHalf2x16(value.z), unpackHalf2x16(value.w)));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#elif defined(FFT_HORIZ))DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_REAL)DELIM" "\n"
R"DELIM(vec2 value0 = unpackHalf2x16(value.x);)DELIM" "\n"
R"DELIM(vec2 value1 = unpackHalf2x16(value.y);)DELIM" "\n"
R"DELIM(vec2 value2 = unpackHalf2x16(value.z);)DELIM" "\n"
R"DELIM(vec2 value3 = unpackHalf2x16(value.w);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(0, 0), value0.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(1, 0), value0.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(2, 0), value1.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(3, 0), value1.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(4, 0), value2.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(5, 0), value2.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(6, 0), value3.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(2, 1) + ivec2(7, 0), value3.yyyy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(imageStore(uImage, coord + ivec2(0, 0), value.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord + ivec2(1, 0), value.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord + ivec2(2, 0), value.zzzz);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord + ivec2(3, 0), value.wwww);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#elif defined(FFT_VERT))DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_REAL)DELIM" "\n"
R"DELIM(vec2 value0 = unpackHalf2x16(value.x);)DELIM" "\n"
R"DELIM(vec2 value1 = unpackHalf2x16(value.y);)DELIM" "\n"
R"DELIM(vec2 value2 = unpackHalf2x16(value.z);)DELIM" "\n"
R"DELIM(vec2 value3 = unpackHalf2x16(value.w);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(8, 1) + ivec2(0, 0), value0.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(8, 1) + ivec2(1, 0), value0.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(8, 1) + ivec2(2, 0), value1.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(8, 1) + ivec2(3, 0), value1.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(8, 1) + ivec2(4, 0), value2.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(8, 1) + ivec2(5, 0), value2.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(8, 1) + ivec2(6, 0), value3.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(8, 1) + ivec2(7, 0), value3.yyyy);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(4, 1) + ivec2(0, 0), value.xxxx);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(4, 1) + ivec2(1, 0), value.yyyy);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(4, 1) + ivec2(2, 0), value.zzzz);)DELIM" "\n"
R"DELIM(imageStore(uImage, coord * ivec2(4, 1) + ivec2(3, 0), value.wwww);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#error Inconsistent defines.)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#define PI 3.14159265359)DELIM" "\n"
R"DELIM(#define SQRT_1_2 0.70710678118)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INVERSE)DELIM" "\n"
R"DELIM(#define PI_DIR (+PI))DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define PI_DIR (-PI))DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Some GLES implementations have lower trancendental precision than desired which)DELIM" "\n"
R"DELIM(// significantly affects the overall FFT precision.)DELIM" "\n"
R"DELIM(// For these implementations it might make sense to add a LUT UBO with twiddle factors,)DELIM" "\n"
R"DELIM(// which can be used here.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// 4-component FP16 twiddles, pack in uvec4.)DELIM" "\n"
R"DELIM(#if !defined(FFT_DUAL) && defined(FFT_HORIZ) && defined(FFT_VEC8))DELIM" "\n"
R"DELIM(#define FFT_OUTPUT_STEP 4u)DELIM" "\n"
R"DELIM(#define FFT_OUTPUT_SHIFT 2u)DELIM" "\n"
R"DELIM(#define ctwiddle uvec4)DELIM" "\n"
R"DELIM(ctwiddle twiddle(uint k, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(// Trancendentals should always be done in highp.)DELIM" "\n"
R"DELIM(FFT_HIGHP vec4 angles = PI_DIR * (float(k) + vec4(0.0, 1.0, 2.0, 3.0)) / float(p);)DELIM" "\n"
R"DELIM(FFT_HIGHP vec4 cos_a = cos(angles);)DELIM" "\n"
R"DELIM(FFT_HIGHP vec4 sin_a = sin(angles);)DELIM" "\n"
R"DELIM(return ctwiddle()DELIM" "\n"
R"DELIM(packHalf2x16(vec2(cos_a.x, sin_a.x)),)DELIM" "\n"
R"DELIM(packHalf2x16(vec2(cos_a.y, sin_a.y)),)DELIM" "\n"
R"DELIM(packHalf2x16(vec2(cos_a.z, sin_a.z)),)DELIM" "\n"
R"DELIM(packHalf2x16(vec2(cos_a.w, sin_a.w)));)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INVERSE)DELIM" "\n"
R"DELIM(#define TWIDDLE_1_8 (uvec4(packHalf2x16(vec2(+SQRT_1_2, +SQRT_1_2)))))DELIM" "\n"
R"DELIM(#define TWIDDLE_3_8 (uvec4(packHalf2x16(vec2(-SQRT_1_2, +SQRT_1_2)))))DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define TWIDDLE_1_8 (uvec4(packHalf2x16(vec2(+SQRT_1_2, -SQRT_1_2)))))DELIM" "\n"
R"DELIM(#define TWIDDLE_3_8 (uvec4(packHalf2x16(vec2(-SQRT_1_2, -SQRT_1_2)))))DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// 2-component twiddles, pack in vec4.)DELIM" "\n"
R"DELIM(#elif (!defined(FFT_DUAL) && defined(FFT_HORIZ) && defined(FFT_VEC4)) || (defined(FFT_DUAL) && defined(FFT_HORIZ) && defined(FFT_VEC8)))DELIM" "\n"
R"DELIM(#define FFT_OUTPUT_STEP 2u)DELIM" "\n"
R"DELIM(#define FFT_OUTPUT_SHIFT 1u)DELIM" "\n"
R"DELIM(#define ctwiddle vec4)DELIM" "\n"
R"DELIM(ctwiddle twiddle(uint k, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(// Trancendentals should always be done in highp.)DELIM" "\n"
R"DELIM(FFT_HIGHP vec2 angles = PI_DIR * (float(k) + vec2(0.0, 1.0)) / float(p);)DELIM" "\n"
R"DELIM(FFT_HIGHP vec2 cos_a = cos(angles);)DELIM" "\n"
R"DELIM(FFT_HIGHP vec2 sin_a = sin(angles);)DELIM" "\n"
R"DELIM(return ctwiddle(cos_a.x, sin_a.x, cos_a.y, sin_a.y);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INVERSE)DELIM" "\n"
R"DELIM(#define TWIDDLE_1_8 (vec2(+SQRT_1_2, +SQRT_1_2).xyxy))DELIM" "\n"
R"DELIM(#define TWIDDLE_3_8 (vec2(-SQRT_1_2, +SQRT_1_2).xyxy))DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define TWIDDLE_1_8 (vec2(+SQRT_1_2, -SQRT_1_2).xyxy))DELIM" "\n"
R"DELIM(#define TWIDDLE_3_8 (vec2(-SQRT_1_2, -SQRT_1_2).xyxy))DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// 1-component twiddle, pack in vec2.)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#define FFT_OUTPUT_STEP 1u)DELIM" "\n"
R"DELIM(#define FFT_OUTPUT_SHIFT 0u)DELIM" "\n"
R"DELIM(#define ctwiddle vec2)DELIM" "\n"
R"DELIM(ctwiddle twiddle(uint k, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(// Trancendentals should always be done in highp.)DELIM" "\n"
R"DELIM(FFT_HIGHP float angle = PI_DIR * float(k) / float(p);)DELIM" "\n"
R"DELIM(return ctwiddle(cos(angle), sin(angle));)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INVERSE)DELIM" "\n"
R"DELIM(#define TWIDDLE_1_8 (vec2(+SQRT_1_2, +SQRT_1_2)))DELIM" "\n"
R"DELIM(#define TWIDDLE_3_8 (vec2(-SQRT_1_2, +SQRT_1_2)))DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define TWIDDLE_1_8 (vec2(+SQRT_1_2, -SQRT_1_2)))DELIM" "\n"
R"DELIM(#define TWIDDLE_3_8 (vec2(-SQRT_1_2, -SQRT_1_2)))DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Complex multiply by v * -j. Trivial case which can avoid mul/add.)DELIM" "\n"
R"DELIM(vec4 cmul_minus_j(vec4 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return vec4(v.y, -v.x, v.w, -v.z);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(vec2 cmul_minus_j(vec2 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return vec2(v.y, -v.x);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Complex multiply by v * +j. Trivial case which can avoid mul/add.)DELIM" "\n"
R"DELIM(vec4 cmul_plus_j(vec4 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return vec4(-v.y, v.x, -v.w, v.z);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(vec2 cmul_plus_j(vec2 v))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(return vec2(-v.y, v.x);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INVERSE)DELIM" "\n"
R"DELIM(#define cmul_dir_j(v) cmul_plus_j(v))DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define cmul_dir_j(v) cmul_minus_j(v))DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Calculate an in-place butterfly with twiddle factors.)DELIM" "\n"
R"DELIM(// a ----------- a + wb)DELIM" "\n"
R"DELIM(//           /)DELIM" "\n"
R"DELIM(//          /)DELIM" "\n"
R"DELIM(//          X)DELIM" "\n"
R"DELIM(//         / //        /   // w * b ------- a - wb)DELIM" "\n"
R"DELIM(//)DELIM" "\n"
R"DELIM(void butterfly(inout vec4 a, inout vec4 b, vec4 w))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec4 t = cmul(b, w);)DELIM" "\n"
R"DELIM(b = a - t;)DELIM" "\n"
R"DELIM(a = a + t;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// Computes butterflies, but the twiddle factors for the two butterflies are)DELIM" "\n"
R"DELIM(// identical.)DELIM" "\n"
R"DELIM(void butterfly(inout vec4 a, inout vec4 b, vec2 w))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(butterfly(a, b, w.xyxy);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly(inout vec2 a, inout vec2 b, vec2 w))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec2 t = cmul(b, w);)DELIM" "\n"
R"DELIM(b = a - t;)DELIM" "\n"
R"DELIM(a = a + t;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// First pass butterfly, special case where w = 1.)DELIM" "\n"
R"DELIM(void butterfly_p1(inout vec4 a, inout vec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec4 t = b;)DELIM" "\n"
R"DELIM(b = a - t;)DELIM" "\n"
R"DELIM(a = a + t;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// First pass butterfly, but also multiply in a twiddle factor of -j to b afterwards.)DELIM" "\n"
R"DELIM(// Used in P == 1 transforms for radix-4, radix-8 etc.)DELIM" "\n"
R"DELIM(void butterfly_p1_minus_j(inout vec4 a, inout vec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec4 t = b;)DELIM" "\n"
R"DELIM(b = vec4(1.0, -1.0, 1.0, -1.0) * (a.yxwz - t.yxwz);)DELIM" "\n"
R"DELIM(a = a + t;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly_p1_plus_j(inout vec4 a, inout vec4 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec4 t = b;)DELIM" "\n"
R"DELIM(b = vec4(-1.0, 1.0, -1.0, 1.0) * (a.yxwz - t.yxwz);)DELIM" "\n"
R"DELIM(a = a + t;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly_p1(inout vec2 a, inout vec2 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec2 t = b;)DELIM" "\n"
R"DELIM(b = a - t;)DELIM" "\n"
R"DELIM(a = a + t;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly_p1_minus_j(inout vec2 a, inout vec2 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec2 t = b;)DELIM" "\n"
R"DELIM(b = vec2(1.0, -1.0) * (a.yx - t.yx);)DELIM" "\n"
R"DELIM(a = a + t;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void butterfly_p1_plus_j(inout vec2 a, inout vec2 b))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec2 t = b;)DELIM" "\n"
R"DELIM(b = vec2(-1.0, 1.0) * (a.yx - t.yx);)DELIM" "\n"
R"DELIM(a = a + t;)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INVERSE)DELIM" "\n"
R"DELIM(#define butterfly_p1_dir_j(a, b) butterfly_p1_plus_j(a, b))DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(#define butterfly_p1_dir_j(a, b) butterfly_p1_minus_j(a, b))DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_RESOLVE_REAL_TO_COMPLEX)DELIM" "\n"
R"DELIM(vec2 r2c_twiddle(uint i, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec2 w = -twiddle(i, p);)DELIM" "\n"
R"DELIM(return vec2(-w.y, w.x);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// See http://www.engineeringproductivitytools.com/stuff/T0001/PT10.HTM for)DELIM" "\n"
R"DELIM(// how the real-to-complex and complex-to-real resolve passes work.)DELIM" "\n"
R"DELIM(// The final real-to-complex transform pass is done by extracting two interleaved FFTs by conjugate symmetry.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(// If we have a real sequence:)DELIM" "\n"
R"DELIM(// (r0, r1, r2, r3, r4, ...), we merge two adjacent real values to a sequence of complex numbers.)DELIM" "\n"
R"DELIM(// We take the FFT of this complex sequence as normal.)DELIM" "\n"
R"DELIM(// What we end up with really is:)DELIM" "\n"
R"DELIM(// FFT((r0, r2, r4, r6, ...)) + FFT(j * (r1, r3, r5, r7, ...)).)DELIM" "\n"
R"DELIM(// If we know the individual FFTs of the even and the odds we can complete the FFT by a single decimation-in-frequency stage.)DELIM" "\n"
R"DELIM(// By conjugate symmetry, we can extract the even and odd FFTs and complex our transform.)DELIM" "\n"
R"DELIM(// Complex-to-real is just the same thing, but in reverse.)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT_real_to_complex(uvec2 i))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uint stride = gl_NumWorkGroups.x * gl_WorkGroupSize.x;)DELIM" "\n"
R"DELIM(uint offset = i.y * stride;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(if (i.x == 0u))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_TEXTURE)DELIM" "\n"
R"DELIM(vec2 x = load_texture(i);)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(vec2 x = load_global(offset);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store(ivec2(i), vec2(x.x + x.y, 0.0));)DELIM" "\n"
R"DELIM(store(ivec2(i) + ivec2(stride, 0), vec2(x.x - x.y, 0.0));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_global(2u * offset, vec2(x.x + x.y, 0.0));)DELIM" "\n"
R"DELIM(store_global(2u * offset + stride, vec2(x.x - x.y, 0.0));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(else)DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_TEXTURE)DELIM" "\n"
R"DELIM(vec2 a = load_texture(i);)DELIM" "\n"
R"DELIM(vec2 b = load_texture(uvec2(stride - i.x, i.y));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(vec2 a = load_global(offset + i.x);)DELIM" "\n"
R"DELIM(vec2 b = load_global(offset + stride - i.x);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(b = vec2(b.x, -b.y);)DELIM" "\n"
R"DELIM(vec2 fe = a + b;)DELIM" "\n"
R"DELIM(vec2 fo = cmul(a - b, r2c_twiddle(i.x, stride));)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_OUTPUT_IMAGE)DELIM" "\n"
R"DELIM(store(ivec2(i), 0.5 * (fe + fo));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(store_global(2u * offset + i.x, 0.5 * (fe + fo));)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_RESOLVE_COMPLEX_TO_REAL)DELIM" "\n"
R"DELIM(vec2 c2r_twiddle(uint i, uint p))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(vec2 w = twiddle(i, p);)DELIM" "\n"
R"DELIM(return vec2(-w.y, w.x);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(void FFT_complex_to_real(uvec2 i))DELIM" "\n"
R"DELIM({)DELIM" "\n"
R"DELIM(uint stride = gl_NumWorkGroups.x * gl_WorkGroupSize.x;)DELIM" "\n"
R"DELIM(uint offset = i.y * stride;)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(#ifdef FFT_INPUT_TEXTURE)DELIM" "\n"
R"DELIM(vec2 a = load_texture(i);)DELIM" "\n"
R"DELIM(vec2 b = load_texture(uvec2(stride - i.x, i.y));)DELIM" "\n"
R"DELIM(#else)DELIM" "\n"
R"DELIM(vec2 a = load_global(2u * offset + i.x);)DELIM" "\n"
R"DELIM(vec2 b = load_global(2u * offset + stride - i.x);)DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM(b = vec2(b.x, -b.y);)DELIM" "\n"
R"DELIM(vec2 even = a + b;)DELIM" "\n"
R"DELIM(vec2 odd = cmul(a - b, c2r_twiddle(i.x, stride));)DELIM" "\n"
R"DELIM()DELIM" "\n"
R"DELIM(store_global(offset + i.x, even + odd);)DELIM" "\n"
R"DELIM(})DELIM" "\n"
R"DELIM(#endif)DELIM" "\n"
R"DELIM()DELIM" "\n"
;
}}
#endif
